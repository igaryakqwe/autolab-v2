datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  phone         String?   @unique
  email         String    @unique
  password      String?
  emailVerified DateTime?

  image      String?
  firstName  String?
  lastName   String?
  middleName String?
  birthDate  DateTime?
  gender     Gender?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts       Account[]
  sessions       Session[]
  employees      Employee[]
  clientVehicles Vehicle[]
  serviceRecords ServiceRecord[]
}

enum Gender {
  MALE
  FEMALE
}

model Organization {
  id          String  @id @default(uuid())
  logo        String?
  name        String
  description String?
  address     String?
  longitude   Float?
  latitude    Float?
  phone       String?
  email       String?
  website     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees      Employee[]
  services       Service[]
  serviceRecords ServiceRecord[]
}

model Employee {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           EmployeeRole
  isActive       Boolean      @default(true)
  startDate      DateTime     @default(now())
  endDate        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  serviceRecords ServiceRecord[]

  @@unique([userId, organizationId])
}

enum EmployeeRole {
  TECHNICIAN
  MANAGER
  OWNER
}

model Service {
  id          String  @id @default(uuid())
  title       String
  description String?
  price       Float
  duration    Int

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceRecords ServiceRecord[] @relation("ServiceToServiceRecord")
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK
  VAN
  BUS
  OTHER
}

model Vehicle {
  id           String      @id @default(uuid())
  type         VehicleType @default(CAR)
  make         String
  model        String
  year         Int
  licensePlate String?
  vin          String?     @unique

  clientId String
  client   User   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceRecords ServiceRecord[]
}

model ServiceRecord {
  id         String        @id @default(uuid())
  startTime  DateTime
  endTime    DateTime?
  status     ServiceStatus @default(PENDING)
  notes      String?
  totalPrice Float?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  clientId String
  client   User   @relation(fields: [clientId], references: [id])

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[] @relation("ServiceToServiceRecord")
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  email   String   @unique
  token   String
  expires DateTime

  @@id([email, token])
}
